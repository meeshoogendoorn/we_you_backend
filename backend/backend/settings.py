"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 2.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# DEPLOY: re-generate
SECRET_KEY = "xgdx&+2id1t9m+g4x9)1-e9qnqvimes#dqwo=b1e^aq(uduaw@"

# Reconfigured the default user model
AUTH_USER_MODEL = "accounts.User"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# DEPLOY: set to the correct domain name
ALLOWED_HOSTS = []


# Application definition
INSTALLED_APPS = [
    "django.contrib.auth",
    "django.contrib.contenttypes",

    "knox",
    "corsheaders",
    "rest_framework",

    "accounts",
    "companies",
    "utilities",
    "activities",
    "communications",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.middleware.common.CommonMiddleware",

    # Not sure about this one. Maybe perform clickjacking attack
    # with React to check if this is needed?
    "django.middleware.clickjacking.XFrameOptionsMiddleware",

    "corsheaders.middleware.CorsMiddleware",
]

ROOT_URLCONF = "backend.urls"

WSGI_APPLICATION = "backend.wsgi.application"


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": os.path.join(BASE_DIR, "db.sqlite3"),
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation"
                ".UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation"
                ".MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation"
                ".CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation"
                ".NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

# Always uses dutch because the locale middleware is removed
# to allow 'dynamic' language codes based on the HTTP header
# you have to create a custom Middleware class that uses the
# Accept-language HTTP header to select the current language
# and set it as the attribute 'LANGUAGE_CODE' on the request
LANGUAGE_CODE = "nl-nl"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True


REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "knox.auth.TokenAuthentication",
    ),

    "DEFAULT_PERMISSION_CLASSES": (
        "knox.auth.TokenAuthentication",
    )
}
